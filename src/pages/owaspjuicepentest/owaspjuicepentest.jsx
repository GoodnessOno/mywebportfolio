import React from 'react'
import { Helmet } from 'react-helmet'
import './owaspjuicepentest.css'
import { Navbar, Footer } from '../../components'
import owaspjuicepentestimage  from '../../assets/Owasp image.jfif'


const Owaspjuicepentest = () => {
  return (
    <div className='owaspjuicepentest container-fluid'>
      <Navbar />
      <Helmet>
        <title>Penetration Testing on OWASP Juice Shop: Vulnerabilities and Mitigation</title>
        <meta 
          name='description'
          content='Learn how to identify and mitigate OWASP Top 10 vulnerabilities through a comprehensive penetration test on Juice Shop using Nmap, OWASP ZAP, and more.'
        />
      </Helmet>
      <div className='owaspjuicepentest-content'>
        <div className='owaspjuicepentest-title'>
          <h1>Penetration Testing on OWASP Juice Shop: Vulnerabilities and Mitigation</h1>
        </div>
        <div className='owaspjuicepentest-image'>
          <img src={owaspjuicepentestimage} alt='unity growth' />
          Image by <a href="https://www.shutterstock.com/search/owasp">Shuttershock</a>
        </div>
        <br />
        <hr />
        <br />
        <div className='owaspjuicepentest-text'>
          <p><strong><i>
          "OWASP Juice Shop is an open-source web application developed for security training and ethical hacking. 
          It is designed to demonstrate OWASP Top 10 vulnerabilities in a safe environment for testers and developers to experiment with common security flaws.
            </i></strong></p>
            <br />
            <hr />
            <br />
            <p>
            <h2>Objective</h2>
            <br />
              The goal of this project was to conduct a thorough penetration test on Juice Shop to identify vulnerabilities and propose remediation strategies based on OWASP best practices.
            <br />
            <br />
              <strong>Key Tools Used:</strong>
              <br />
              1. Nmap: For port scanning and service detection.
              <br />
              2. Nikto: For web server scanning and identifying insecure configurations.
              <br />
              3. OWASP ZAP: For detecting vulnerabilities like XSS, CSRF, and more.
              <br />
              4. Ubuntu Virtual Machine
                <br />
                <br />
                <h2>Tools and Methodology</h2>
                <br />
                <strong>Nmap: Service and Version Detection</strong>
                <br />
                  Scanned the localhost and identified open ports and services.
                  Captured detailed information about the services running on port 3000, helping identify potential entry points.
                <br />
                <br />
                <strong>Nikto: Web Server Scanning</strong>
                <br />
                  Highlighted critical misconfigurations such as exposed metadata and lack of CSP headers.
                  Discovered sensitive information through HTTP headers like X-Recruiting and Feature-Policy.
                <br />
                <br />
                <strong>OWASP ZAP: Automated Vulnerability Scanning</strong>
                <br />
                  Detected Cross-Domain JavaScript inclusion and Content Security Policy misconfigurations.
                  Used ZAP’s proxy mode to intercept requests and explore deeper flaws in the application.
                <br />
                <br />
                <strong>Vulnerabilities Identified</strong>
                <br />
                1. Cloud Metadata Exposure:
                <br />
                This vulnerability allows attackers to access sensitive cloud metadata, including IAM roles and tokens.
                <br />
                Remediation: Implement strict access controls on metadata endpoints.
                <br />
                <br />
                2. Missing Content Security Policy (CSP) Headers:
                <br />
                The lack of CSP headers opens the application to cross-site scripting (XSS) attacks.
                <br />
                Remediation: Define a robust CSP that limits the domains from which content can be loaded.
                <br />
                <br />
                3. Cross-Domain Misconfiguration:
                <br />
                Cross-domain policy flaws could allow attackers to manipulate requests from unauthorized domains.
                <br />
                Remediation: Ensure that only trusted domains can access resources by properly configuring the Access-Control-Allow-Origin header.
                <br />
                <br />
                4. Information Disclosure Through Suspicious Comments:
                <br />
                Source code comments were found to contain sensitive information about the application’s structure.
                <br />
                Remediation: Regularly audit and clean up comments and unused code before deploying applications.
                <br />
                <br />
                <strong>Results and Remediation Strategies</strong>
                <br />
                For each vulnerability identified, detailed steps were taken to analyze the risk and potential exploit. Along with this, I developed a set of recommended remediation strategies based on OWASP guidelines:
                <br />
                <br />
                <strong>Implement Strong Authentication</strong>
                <br />
                Utilizing Multi-Factor Authentication (MFA) to secure sensitive endpoints.
                <br />
                <br />
                <strong>Enforce Secure Communication</strong>
                <br />
                Ensure HTTPS is enforced across all connections to prevent Man-in-the-Middle (MITM) attacks.
                <br />
                <br />
                <strong>Security Headers</strong>
                <br />
                Implement headers like X-Frame-Options, X-Content-Type-Options, and Strict-Transport-Security to add layers of security.
                <br />
                <hr />
                <br />
                <strong>Conclusion</strong>
                This project demonstrated the importance of performing regular security assessments on web applications to identify vulnerabilities before they can be exploited. Tools like Nmap, Nikto, and OWASP ZAP are essential for penetration testers and security analysts to improve the security posture of their applications.
                As cybersecurity continues to evolve, I look forward to further refining my penetration testing skills and contributing to more secure digital ecosystems.
                <br />
                <br />
                <b>Call to Action: Check out my GitHub repository for more details and the complete report of the vulnerabilities found during the testing process: <a href="https://github.com/GoodnessOno/Pentesting-OWASP-Juice-Shop">GITHUB REPOSITORY</a></b>
            </p>
        </div>
      </div>
      <Footer />
    </div>
  )
}

export default Owaspjuicepentest
